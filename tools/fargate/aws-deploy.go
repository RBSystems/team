package main

import (
	"bytes"
	"fmt"
	"strings"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/cloudformation"
	"github.com/aws/aws-sdk-go/service/ecs"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/byuoitav/common/log"
)

var (
	bucketName = "oitav-fargate-deployment-info"
)

//StartDeployment .
func StartDeployment(name string, payload []byte) error {

	err := SendToS3(bucketName, name, payload)
	if err != nil {
		return err
	}

	url := fmt.Sprintf("https://s3-us-west-2.amazonaws.com/%v/%v", bucketName, name)
	cf := cloudformation.New(session.New(), &aws.Config{Region: aws.String("us-west-2")})

	//check to see if the stack already exists
	_, err = cf.DescribeStacks(&cloudformation.DescribeStacksInput{
		StackName: aws.String(name),
	})
	if err != nil {
		if v, ok := err.(awserr.Error); ok {
			if v.Code() != "ValidationError" || !strings.Contains(v.Message(), "does not exist") {
				log.L.Errorf("Couldn't describe cloudformation stack... %v", err.Error())
				return err
			}
		} else {

			log.L.Errorf("Couldn't describe cloudformation stack... %v", err.Error())
			return err
		}
	}

	if err == nil {
		log.L.Infof("Updating cloudformation stack... Generating changeset.")

		//it's there - now we need to update the stack
		csName := fmt.Sprintf("%v-%v", name, time.Now().Format("01-02-15-04-05"))

		//check the changeset first
		_, err := cf.CreateChangeSet(&cloudformation.CreateChangeSetInput{
			ChangeSetName: aws.String(csName),
			Description:   aws.String("Autogenerated"),
			StackName:     aws.String(name),
			TemplateURL:   aws.String(url),
		})
		if err != nil {
			log.L.Warnf("Couldn't generate cloudformation changeset: %v", err.Error())
			return err
		}

		changeset, err := cf.DescribeChangeSet(&cloudformation.DescribeChangeSetInput{
			ChangeSetName: aws.String(csName),
			StackName:     aws.String(name),
		})
		if err != nil {
			log.L.Warnf("Couldn't retrieve cloudformation changeset: %v", err.Error())
			return err
		}

		//go get the changeset
		for *changeset.Status == "CREATE_PENDING" || *changeset.Status == "CREATE_IN_PROGRESS" {
			time.Sleep(2 * time.Second)
			changeset, err = cf.DescribeChangeSet(&cloudformation.DescribeChangeSetInput{
				ChangeSetName: aws.String(csName),
				StackName:     aws.String(name),
			})
			if err != nil {
				log.L.Warnf("Couldn't retrieve cloudformation changeset: %v", err.Error())
				return err
			}
			log.L.Infof("%v", changeset)
			log.L.Infof("%v", len(changeset.Changes))
		}

		serviceChanges := false
		for _, v := range changeset.Changes {
			if *v.ResourceChange.LogicalResourceId == "service" {
				log.L.Infof("Changes resulted in a change to the service, will not force redeploy")
				serviceChanges = true
				break
			}
		}

		if !serviceChanges || len(changeset.Changes) == 0 {
			log.L.Infof("No Environment changes. Forcing an ecs task redeploy.")
			err := ForceECSRedeploy(name)
			if err != nil {
				return fmt.Errorf("Couldn't force redeploy: %v", err.Error())
			}
		}

		output, err := cf.ExecuteChangeSet(&cloudformation.ExecuteChangeSetInput{
			ChangeSetName: aws.String(csName),
			StackName:     aws.String(name),
		})
		if err != nil {
			if v, ok := err.(awserr.Error); ok {
				if v.Code() != "ValidationError" || !strings.Contains(v.Message(), "No updates") {
					log.L.Errorf("Couldn't update cloudformation stack: %v", err.Error())
					return err
				}
				log.L.Infof("No updates to stack...")

				//we need to force an update to the service
				ForceECSRedeploy(name)
			}
		}
		log.L.Infof("%v", output.String())

	} else {
		log.L.Infof("Creating new cloudformation stack")
		//we need to create the stack
		output, err := cf.CreateStack(&cloudformation.CreateStackInput{
			StackName:   aws.String(name),
			TemplateURL: aws.String(url),
		})
		if err != nil {

			log.L.Errorf("Couldn't create cloudformation stack: %v", err.Error())
			return err
		}
		log.L.Infof("%v", output.String())

	}

	return nil
}

//ForceECSRedeploy .
func ForceECSRedeploy(name string) error {

	log.L.Infof("Forcing update to fargate service")

	svc := ecs.New(session.New(), &aws.Config{Region: aws.String("us-west-2")})

	cluster := strings.Split(name, "--")
	result, err := svc.UpdateService(&ecs.UpdateServiceInput{
		Cluster:            aws.String(cluster[0]),
		ForceNewDeployment: aws.Bool(true),
		Service:            aws.String(name),
		TaskDefinition:     aws.String(name),
	})
	if err != nil {
		log.L.Errorf("Couldn't force a change to the fargate service", err.Error())
		return err
	}
	log.L.Infof(result.String())
	return nil
}

//SendToS3 .
func SendToS3(bucketName, fileName string, payload []byte) error {

	log.L.Infof("Sending to S3 bucket...")
	//we actually try a deployment
	svc := s3.New(session.New(), &aws.Config{Region: aws.String("us-west-2")})
	_, err := svc.PutObject(&s3.PutObjectInput{
		Bucket: aws.String(bucketName),
		Key:    aws.String(fileName),
		Body:   bytes.NewReader(payload),
	})
	if err != nil {
		log.L.Errorf("Couldn't push config to S3: %v", err.Error())
		return err
	}
	log.L.Infof("Done.")
	return nil
}
